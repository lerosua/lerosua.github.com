<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 程序设计 | 阳光烂灿的日子]]></title>
  <link href="http://lerosua.github.io/blog/categories/cheng-xu-she-ji/atom.xml" rel="self"/>
  <link href="http://lerosua.github.io/"/>
  <updated>2014-03-08T21:58:27+08:00</updated>
  <id>http://lerosua.github.io/</id>
  <author>
    <name><![CDATA[lerosua]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Icalk 0.1.5]]></title>
    <link href="http://lerosua.github.io/blog/2011/07/03/icalk-0-1-5/"/>
    <updated>2011-07-03T00:00:00+08:00</updated>
    <id>http://lerosua.github.io/blog/2011/07/03/icalk-0-1-5</id>
    <content type="html"><![CDATA[<p>icalk是一个基于gloox的客户端。但其实我也没正式发布过，这个项目也是基于练习，娱乐，测试的。用来实现自己想法的一个东东。之前看到了一个飞信客户端的一个策划，准备将之联系人列表和聊天窗口合并。觉得这个idea不错，于是在icalk上面试验。于是有了如下的界面：</p>




<p>&nbsp;
<table style="width: auto;">
<tbody>
<tr>
<td><a href="https://picasaweb.google.com/lh/photo/juLMl7XOIWXpWRQr5zgPhw?feat=embedwebsite"><img src="https://lh3.googleusercontent.com/-7DD_9mn5MHo/Tg_Z7okJ6pI/AAAAAAAAFkA/UpUyWQzh8Zs/s144/icalk-0.1.5.jpg" alt="" width="144" height="90" /></a></td>
</tr>
<tr>
<td style="font-family: arial,sans-serif; font-size: 11px; text-align: right;">发件人 <a href="https://picasaweb.google.com/115325448705005533545/LerosuaBlog?authuser=0&amp;feat=embedwebsite">lerosua' blog</a></td>
</tr>
</tbody>
</table>
如果看不到picasaweb的话，可能看不到图.</p>




<p>另外还给联系人添加了gmail, android属性，以标志对方正在使用什么设备上的gtalk，但对于账户多设备登录问题未做处理，大概是以最后一个设备状态为准，不过也不确定。反正这东西信马由彊，什么时候想到些啥就加一些东西。</p>




<p>所以如果你看到这个东西，千万不要下载使用，因为它的作者非常不靠谱。写出来是给我自个玩的。</p>




<p>代码在google code上，项目名是icalk，svn其实好久没上传了，因为我转向git后，老要用git-svn给google code传代码，搞得有点乱，所以好几次就没传了。现在是在下载页面有打包。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Glade设计之自动连接信号函数]]></title>
    <link href="http://lerosua.github.io/blog/2011/03/04/glade-signal-auto-connect/"/>
    <updated>2011-03-04T00:00:00+08:00</updated>
    <id>http://lerosua.github.io/blog/2011/03/04/glade-signal-auto-connect</id>
    <content type="html"><![CDATA[<p>glade是一个用于辅助Gtk+界面设计的工具。负责把需要用的界面元素画出来。然后在代码里把界面元素（比如button)取出来，连接上需要的信号回调函数。</p>




<p>当然glade自身也早已提供了自动连接信号函数的方法。在界面元素（比如button）的信号配置栏里，可以看到此元素所拥有的信号，而只需要填上相应的“操作句柄”，也就是回调函数。则完成自动连接信号处理的第一步了。如图示：
<a href="http://leros.linuxapp.org/wp-content/uploads/2011/03/button-signal.png"><img class="alignnone size-full wp-image-978" title="button-signal" src="http://leros.linuxapp.org/wp-content/uploads/2011/03/button-signal.png" alt="" width="346" height="347" /></a></p>




<p>图中的on_button1_clicked 函数当然是在你代码里定义的回调函数了。而主函数里需要调用 gtk_builder_connect_signals() 来显示连接一下。代码示例如下：
<pre lang="C">int main (int argc, char *argv[])
{
        GtkBuilder  *builder;
        GtkWidget   *window;
    
        gtk_init (&amp;argc, &amp;argv);
    
        builder = gtk_builder_new (); 
        gtk_builder_add_from_file (builder, "ea.glade", NULL);
 
        window = GTK_WIDGET (gtk_builder_get_object (builder, "window"));
        gtk_builder_connect_signals (builder, NULL);                                                                                                         
        g_object_unref (G_OBJECT (builder));
    
        gtk_widget_show (window);    
        gtk_main (); 
    
        return 0;
}
</pre>
最后需要注意的是，glade的这个自动连接机制是通过gmodule来查找回调函数的，因此在编译的时候需要额外加上 gmodule-2.0模块。类似于
<pre lang="C">gcc test.c `pkg-config --libs --cflags gtk+-2.0 gmodule-2.0`</pre>
用了以上的方法，大部分程序里元素的回调都可以自动连接到相应的信号，而不需要再在代码里取出元素来连接，的确很方便。</p>




<p>现在俺来说说少数情况下会发生什么事。<br />
gtk_builder_connect_signals()的第二个参数是传给回调的用户数据参数。这意味着，给gtk_builder_connect_signals()传的参数将会发给所有的信号回调函数。如果你需要的是给每个不同的回调函数传不同的参数，那些方法将失效。迂回的补救方法是，把这些不同的参数包装成一个结构体，然后再在各个不同的回调函数里拆封解释。不过这就增加了复杂度，此种情况还是按照原来的方法取出元素来连接信号更好。</p>




<p>用g_signal_connect() 甚至可以重复连接两次，每次都给元素传递不同的用户数据。自动连接也不能做到。</p>




<p>而在Gtkmm中，Gtk::Builder并没有包装gtk_builder_connect_signals()方法，因此只能手工连接信号函数。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evmaker 0.01]]></title>
    <link href="http://lerosua.github.io/blog/2010/08/08/evmaker-0-01/"/>
    <updated>2010-08-08T00:00:00+08:00</updated>
    <id>http://lerosua.github.io/blog/2010/08/08/evmaker-0-01</id>
    <content type="html"><![CDATA[<p>上星期提到的一个<a href="http://leros.linuxapp.org/2010/08/evmaker/">简单的视频编辑GUI</a>有点眉目了。写着的时候就经常想一些问题，它既然是一个mencoder的GUI包装，就只能是它的子集了，因为GUI穷尽不了命令行的所有参数指令，特别是像mencoder这么强大的工具，视频编辑这种重视参数的活。只要把这个evmaker当成一个脚本，心态也就平衡了。但即使如此，也发现，界面的定义已经不直观了，相信大部分人看了也不会明白怎么操作。</p>




<p><a href="http://leros.linuxapp.org/wp-content/uploads/2010/08/evmaker1.jpg"><img class="alignnone size-full wp-image-880" title="evmaker1" src="http://leros.linuxapp.org/wp-content/uploads/2010/08/evmaker1.jpg" alt="" width="692" height="432" /></a></p>




<p>以上演示的是，抽取视频的任一段时间出来。那个时间轴是从avidemux_gtk里学来的。</p>




<p>evmaker调用的是mencoder,没对编码有啥设置，这些太复杂。</p>




<p>源代码<a href="http://code.google.com/p/geekr/downloads/detail?name=evmaker-0.01.tar.gz&amp;can=2&amp;q="> evmaker.0.01.tar.gz</a></p>




<p>代码是用pygtk写的，不用编译，但也没写安装程序，当成脚本运行吧。</p>




<p>记住，不要对它有所期待，因为我对自己写的程序从来是始乱终弃的。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个视频编辑器的构想]]></title>
    <link href="http://lerosua.github.io/blog/2010/08/02/evmaker/"/>
    <updated>2010-08-02T00:00:00+08:00</updated>
    <id>http://lerosua.github.io/blog/2010/08/02/evmaker</id>
    <content type="html"><![CDATA[<p>muzuiget 同学做了一个视频分割的<a href="http://qixinglu.com/archives/release_split_video_file_shell_script_mspliter?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=release_split_video_file_shell_script_mspliter">脚本</a>，并提到了我可能会做一个GUI. 事实上我是有这么一个想法。</p>




<p>当然现在已经有很多视频编辑软件了。但一来我觉得那些视频编辑的概念挺复杂的。二来，他们都很精细，在加载视频时，就一帧一帧地分解视频，非常吃cpu。而命令行的参数又过于烦杂。目前我想要的需求则是方便地分割，并合并一连串视频，可能的话，合成同步的视频与音频。</p>




<p>基本思想则是用pygtk来包装mencoder,ffmpeg这些命令行，省事，省时。它大概会是这个样子：</p>




<p><a href="http://leros.linuxapp.org/wp-content/uploads/2010/08/evmaker.jpg"><img class="alignnone size-large wp-image-869" title="evmaker" src="http://leros.linuxapp.org/wp-content/uploads/2010/08/evmaker-1024x640.jpg" alt="" width="661" height="412" /></a></p>




<p>代码写到一半，才发现这界面布局跟pitivi差不离。功能上肯定比不了pitivi的了。不知道这样的东西有人需要不，没人要就拿来练python好了，写到多少算多少。目前无发布计划，无代码。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[建立了gmchess的开发邮件列表]]></title>
    <link href="http://lerosua.github.io/blog/2009/04/11/%E5%BB%BA%E7%AB%8B%E4%BA%86gmchess%E7%9A%84%E5%BC%80%E5%8F%91%E9%82%AE%E4%BB%B6%E5%88%97%E8%A1%A8/"/>
    <updated>2009-04-11T00:00:00+08:00</updated>
    <id>http://lerosua.github.io/blog/2009/04/11/建立了gmchess的开发邮件列表</id>
    <content type="html"><![CDATA[<p>昨天的想法尚未深入探索，但已小有眉目。实践在gmchess项目上。<br />
首先是建立了gmchess的开发邮件列表<br />
http://groups.google.com/group/gmchess-dev?hl=zh-CN<br />
感兴趣的同学可以定阅。我将尽可能将所想，所写，所改，都一一反应在列表上。<br />
目前没有其它开发者的话，那就我一个人说啰。做到唠唠叼叼也不怕。<br />
沉默是金这句话实在不适合开发者。</p>

]]></content>
  </entry>
  
</feed>
