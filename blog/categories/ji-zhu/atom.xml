<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 技术 | 阳光烂灿的日子]]></title>
  <link href="http://lerosua.github.io/blog/categories/ji-zhu/atom.xml" rel="self"/>
  <link href="http://lerosua.github.io/"/>
  <updated>2016-03-13T22:40:02+08:00</updated>
  <id>http://lerosua.github.io/</id>
  <author>
    <name><![CDATA[lerosua]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[加密与解密]]></title>
    <link href="http://lerosua.github.io/blog/2014/08/21/jia-mi-yu-jie-mi/"/>
    <updated>2014-08-21T09:05:01+08:00</updated>
    <id>http://lerosua.github.io/blog/2014/08/21/jia-mi-yu-jie-mi</id>
    <content type="html"><![CDATA[<h1>网络安全 -加密与解密</h1>

<p>给同事讲解加解密知识的一个大纲</p>

<h2>传统加密</h2>

<ul>
<li>移位式，将字母顺序重新排列</li>
<li><p>替换式，将字母换成其它字母或符号</p></li>
<li><p>恺撒密码(变换加密)
<code>
变换方式:
  加密公式：密文 = (明文 + 位移数) Mod 26  
  解密公式：明文 = (密文 - 位移数) Mod 26
</code></p></li>
<li><p>破解，穷举法，特征值猜想法</p></li>
</ul>


<h2>现代密码学</h2>

<ul>
<li>分组密码, 取用明文的一个区块和密钥，输出相同大小的密文区块。DES/AES经典的分组密码</li>
<li>流密码，相对于区块加密，制造一段任意长的钥匙原料，与明文依位元或字符结合，有点类似一次一密密码本（one-time pad）。输出的串流根据加密时的内部状态而定。在一些流密码上由钥匙控制状态的变化。RC4是相当有名的流密码。</li>
</ul>


<h3>对称加密</h3>

<ul>
<li>DES（Data Encryption Standard）：对称算法，数据加密标准，速度较快，适用于加密大量数据的场合, 不过已基本被抛弃。</li>
<li>3DES（Triple DES）：是基于DES的对称算法，对一块数据用三个不同的密钥进行三次加密，强度更高;</li>
<li>RC2和RC4：对称算法，用变长密钥对大量数据进行加密，比 DES 快；</li>
<li>IDEA（International Data Encryption Algorithm）国际数据加密算法，使用 128 位密钥提供非常强的安全性；</li>
<li>AES（Advanced Encryption Standard）：高级加密标准，对称算法，是下一代的加密算法标准，速度快，安全级别高，在21世纪AES 标准的一个实现是 Rijndael 算法；</li>
<li>BLOWFISH，它使用变长的密钥，长度可达448位，运行速度很快；</li>
<li>TEA算法，实现简单，速度快，腾讯常用。</li>
<li>RC4算法</li>
</ul>


<h3>非对称加密</h3>

<ul>
<li><p>公钥与私钥,公钥用于公布，别人用来加密，私钥自己保存，用来解密。 私钥还可用于签名，然后公众对公钥对其验证。</p></li>
<li><p>RSA：由 RSA 公司发明，是一个支持变长密钥的公共密钥算法，需要加密的文件块的长度也是可变的，非对称算法. 大整数因式分解是RSA算法的基础。 RSA在ssh中的应用。</p></li>
<li>ECC: 椭圆曲线算法,</li>
</ul>


<p>RSA原理基于欧拉定理
RSA：算法如下：
首先, 找出三个数, p, q, r,
　　其中 p, q 是两个相异的质数, r 是与 (p-1)(q-1) 互质的数&hellip;&hellip;
　　p, q, r 这三个数便是 private key
接著, 找出 m, 使得 rm == 1 mod (p-1)(q-1)&hellip;..
　　这个 m 一定存在, 因为 r 与 (p-1)(q-1) 互质, 用辗转相除法就可以得到了&hellip;..
　　再来, 计算 n = pq&hellip;&hellip;.
　　m, n 这两个数便是 public key</p>

<p>在椭圆曲线加密（ECC）中，利用了某种特殊形式的椭圆曲线，即定义在有限域上的椭圆曲线。其方程如下：
<code>
y2=x3+ax+b(mod p)
</code>
这里p是素数，a和b为两个小于p的非负整数，它们满足：
4a3+27b2(mod p)≠0 其中，x,y,a,b ∈Fp，则满足式（2）的点（x,y）和一个无穷点O就组成了椭圆曲线E。</p>

<h4>ECC优点</h4>

<p>椭圆曲线公钥系统是代替RSA的强有力的竞争者。椭圆曲线加密方法与RSA方法相比，有以下的优点：
（1）安全性能更高 如160位ECC与1024位RSA、DSA有相同的安全强度。
（2）计算量小，处理速度快 在私钥的处理速度上（解密和签名），ECC远 比RSA、DSA快得多。
（3）存储空间占用小 ECC的密钥尺寸和系统参数与RSA、DSA相比要小得多， 所以占用的存储空间小得多。
（4）带宽要求低使得ECC具有广泛的应用前景。</p>

<h3>摘要算法</h3>

<p>消息摘要算法的主要特征是加密过程不需要密钥，并且经过加密的数据无法被解密，只有输入相同的明文数据经过相同的消息摘要算法才能得到相同的密文。</p>

<ul>
<li><p>MD5 MD5是输入不定长度信息，输出固定长度128-bits的算法。经过程序流程，生成四个32位数据，最后联合起来成为一个128-bits散列.</p></li>
<li><p>SHA1</p></li>
<li><p>DSA算法</p></li>
</ul>


<h3>密码学的应用</h3>

<ul>
<li>签名，反向利用非对称加密。私钥签名，公钥解密认证。</li>
<li>ssh登录认证.</li>
<li><p>https,即http+ssl, 客户端发送利用服务器公钥发送密钥请求，随后使用密钥进行对称加密通讯。</p></li>
<li><p>无线加密, WEP，无线加密协议，使用RC4串流加密，不安全。WPA/WPA2改进加强加密.</p></li>
</ul>


<h3>加解密操作</h3>

<ul>
<li>使用des加密
<code>
openssl des -e -in file.txt -out enfile.txt
</code></li>
<li>使用des解密
<code>
openssl des -d -in enfile.txt -out defile.txt
</code></li>
</ul>


<h3>PKI的一些摘录</h3>

<p><code>
PKI标准可以分为第一代和第二代标准[12]。
第一代PKI标准主要包括美国RSA公司的公钥加密标准（Public Key Cryptography Standards，PKCS）系列、国际电信联盟的ITU-T X.509、IETF组织的公钥基础设施X.509（Public Key Infrastructure X.509，PKIX）标准系列、无线应用协议（Wireless Application Protocol ,WAP）论坛的无线公钥基础设施（Wireless Public Key Infrastructure，WPKI）标准等。第一代PKI标准主要是基于抽象语法符号（Abstract Syntax Notation One，ASN.1）编码的，实现比较困难，这也在一定程度上影响了标准的推广。
第二代PKI标准是在2001年，由微软、VeriSign和webMethods三家公司发布了XML密钥管理规范（XML Key Management Specification，XKMS），被称为第二代PKI标准。XKMS由两部分组成：XML密钥信息服务规范（XML Key Information Service Specification，X-KISS）和XML密钥注册服务规范（XML Key Registration Service Specification，X-KRSS）。X-KISS定义了包含在XML-SIG元素中的用于验证公钥信息合法性的信任服务规范；使用X-KISS规范，XML应用程序可通过网络委托可信的第三方CA处理有关认证签名、查询、验证、绑定公钥信息等服务。X-KRSS则定义了一种可通过网络接受公钥注册、撤销、恢复的服务规范；XML应用程序建立的密钥对，可通过X-KRSS规范将公钥部分及其它有关的身份信息发给可信的第三方CA注册。X-KISS和X-KRSS规范都按照XML Schema 结构化语言定义，使用简单对象访问协议（SOAP V1.1）进行通信，其服务与消息的语法定义遵循Web服务定义语言（WSDL V1.0）。目前XKMS已成为W3C的推荐标准，并已被微软、VeriSign等公司集成于他们的产品中（微软已在ASP.net中集成了XKMS，VeriSign已发布了基于Java的信任服务集成工具包TSIK）。
CA中心普遍采用的规范是X.509[13]系列和PKCS系列，其中主要应用到了以下规范：
1．X.209（1988）
ASN.1是描述在网络上传输信息格式的标准方法。它有两部分：第一部份（ISO 8824/ITU X.208）描述信息内的数据、数据类型及序列格式，也就是数据的语法；第二部分（ISO 8825/ITU X.209）描述如何将各部分数据组成消息，也就是数据的基本编码规则。
ASN.1原来是作为X.409的一部分而开发的，后来才独立地成为一个标准。这两个协议除了在PKI体系中被应用外，还被广泛应用于通信和计算机的其他领域。
2．X.500（1993）
X.500是一套已经被国际标准化组织（ISO）接受的目录服务系统标准，它定义了一个机构如何在全局范围内共享其名字和与之相关的对象。X.500是层次性的，其中的管理域（机构、分支、部门和工作组）可以提供这些域内的用户和资源信息。在PKI体系中，X.500被用来惟一标识一个实体，该实体可以是机构、组织、个人或一台服务器。X.500被认为是实现目录服务的最佳途径，但X.500的实现需要较大的投资，并且比其他方式速度慢;而其优势具有信息模型、多功能和开放性。
3．X.509（1993）
X.509是由国际电信联盟（ITU-T）制定的数字证书标准。在X.500确保用户名称惟一性的基础上，X.509为X.500用户名称提供了通信实体的鉴别机制，并规定了实体鉴别过程中广泛适用的证书语法和数据接口。
X.509的最初版本公布于1988年。X.509证书由用户公共密钥和用户标识符组成。此外还包括版本号、证书序列号、CA标识符、签名算法标识、签发者名称、证书有效期等信息。这一标准的最新版本是X.509 v3，它定义了包含扩展信息的数字证书。该版数字证书提供了一个扩展信息字段，用来提供更多的灵活性及特殊应用环境下所需的信息传送。
4．PKCS系列标准
PKCS是由美国RSA数据安全公司及其合作伙伴制定的一组公钥密码学标准，其中包括证书申请、证书更新、证书作废表发布、扩展证书内容以及数字签名、数字信封的格式等方面的一系列相关协议。到1999年底，PKCS已经公布了以下标准：
PKCS#1：定义RSA公开密钥算法加密和签名机制，主要用于组织PKCS#7中所描述的数字签名和数字信封。
PKCS#3：定义Diffie-Hellman密钥交换协议。
PKCS#5：描述一种利用从口令派生出来的安全密钥加密字符串的方法。使用MD2或MD5 从口令中派生密钥，并采用DES-CBC模式加密。主要用于加密从一个计算机传送到另一个计算机的私人密钥，不能用于加密消息。
PKCS#6：描述了公钥证书的标准语法，主要描述X.509证书的扩展格式。
PKCS#7：定义一种通用的消息语法，包括数字签名和加密等用于增强的加密机制，PKCS#7与PEM兼容，所以不需其他密码操作，就可以将加密的消息转换成PEM消息。
PKCS#8：描述私有密钥信息格式，该信息包括公开密钥算法的私有密钥以及可选的属性集等。
PKCS#9：定义一些用于PKCS#6证书扩展、PKCS#7数字签名和PKCS#8私钥加密信息的属性类型。
PKCS#10：描述证书请求语法。
PKCS#11：称为Cyptoki，定义了一套独立于技术的程序设计接口，用于智能卡和PCMCIA卡之类的加密设备。
PKCS#12：描述个人信息交换语法标准。描述了将用户公钥、私钥、证书和其他相关信息打包的语法。
PKCS#13：椭圆曲线密码体制标准。
PKCS#14：伪随机数生成标准。
PKCS#15：密码令牌信息格式标准。
5．OCSP在线证书状态协议
OCSP（Online Certificate Status Protocol）[14]是IETF颁布的用于检查数字证书在某一交易时刻是否仍然有效的标准。该标准提供给PKI用户一条方便快捷的数字证书状态查询通道，使PKI体系能够更有效、更安全地在各个领域中被广泛应用。
6．LDAP 轻量级目录访问协议
LDAP规范（RFC1487）简化了笨重的X.500目录访问协议，并且在功能性、数据表示、编码和传输方面都进行了相应的修改。1997年，LDAP第3版本成为互联网标准。目前，LDAP v3已经在PKI体系中被广泛应用于证书信息发布、CRL信息发布、CA政策以及与信息发布相关的各个方面。
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[osx下crossover安装YY语音小记]]></title>
    <link href="http://lerosua.github.io/blog/2014/03/15/osxxia-crossoveran-zhuang-yyyu-yin-xiao-ji/"/>
    <updated>2014-03-15T16:37:03+08:00</updated>
    <id>http://lerosua.github.io/blog/2014/03/15/osxxia-crossoveran-zhuang-yyyu-yin-xiao-ji</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>因工作关系需要用到YY语音。但这个工具目前并未有计划发布mac版本程序。在网上搜索了一下，曾经有过用CrossOver跑YY语音成功的案例，更奇特的是淘宝还有卖for mac 的YY语音安装包。那么这里尝试最新版本的CrossOver (v13.1)跑YY语音(v6.19)版本。</p>

<h2>准备工作</h2>

<ul>
<li>下载<strong>CrossOver</strong>,可去<a href="http://www.codeweavers.com/products/">官网</a>下载试用版，有钱的话就购买正式版吧，暂时没条件就去Google找一个。</li>
<li>下载<strong>YY语音</strong>,这个是免费软件，也直接去<a href="http://www.yy.com/s/download.html">官网</a>下载即可。</li>
</ul>


<h2>安装工作</h2>

<ul>
<li>先把<strong>CrossOver</strong>安装到系统中。打开程序后，在菜单中选择<code>容器管理</code>,建立一个基本<strong><em>windows XP</em></strong>的容器。</li>
<li>然后选择容器旁边的<code>应用程序</code>的tab页，点击<code>安装软件</code>的按钮。选择<code>运行时支持的组件</code>里，把<strong><em>Microsoft Visual C++ 2008(9.0)Redistributable</em></strong>安装上。
<img src="https://www.dropbox.com/sh/0zua8qozujowahf/GDT_1Bzjkr/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202014-03-15%2000.30.19.png?dl=1" alt="add-box" /></li>
<li>准备好<strong><em>YY语音</em></strong>的安装程序，仍然是<code>CrossOver软件安装程序</code>界面里，点选<code>不支持的程序</code>下一级<code>其他应用程序</code>. 然后在<code>选择一个程序安装包</code>里点击<code>选择安装文件</code>，把<strong><em>YY语音</em></strong>安装程序文件选择上。并在下一行留意到所安装容器。点<code>执行</code>即可安装。
<img src="https://www.dropbox.com/s/e4y682c19b7kma4/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202014-03-15%2000.30.36.png?dl=1" alt="install-vc++" />
<img src="https://www.dropbox.com/sh/0zua8qozujowahf/bIDv4Gvk92/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202014-03-15%2000.31.04.png?dl=1" alt="install-YY" /></li>
<li>之后程序基本上就正常执行了。目前只尝试了基本操作。
<img src="https://www.dropbox.com/sh/0zua8qozujowahf/qyX9Wny7ne/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202014-03-15%2000.31.30.png?dl=1" alt="installing" /></li>
</ul>


<h2>美化工作</h2>

<p>默认的<strong><em>CrossOver</em></strong>模拟出来的程序界面中文字体太虚，看不清。因此可以进行字体替换工作。</p>

<pre><code>cd /Applications/CrossOver.app/Contents/SharedSupport/CrossOver/share/wine/fonts
</code></pre>

<p>在这个目录下，把你需要的字体复制成ume-ui-gothic.ttf即可，实际上我尝试了一下，目前只有simsum.ttf的替换效果比较好。</p>

<pre><code>cp simsum.ttf /Applications/CrossOver.app/Contents/SharedSupport/CrossOver/share/wine/fonts/ume-ui-gothic.ttf
</code></pre>

<p>最后重启CrossOver即可看到相关效果。</p>

<p><img src="https://www.dropbox.com/s/312qarmc37nejiu/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202014-03-15%2000.37.48.png?dl=1" alt="YYinOSX" /></p>
]]></content>
  </entry>
  
</feed>
